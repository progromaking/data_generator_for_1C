
// Публикация на инфостарте: http://infostart.ru/public/530507/


Перем мОчищенныеКоллекции; // Соответствие. Используется для очистки движений и табличных частей. При первом упоминании коллекция очищается и помещается в это соответствие. 
Перем мКэшНаборИзмеренийРегистровСведений;
Перем мРезультат; // Структура, возвращаемая методом СоздатьДанныеПоТабличномуДокументу()

// { Plugin interface
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Тип", ВозможныеТипыПлагинов.Утилита);
	Результат.Вставить("Идентификатор", Метаданные().Имя);
	Результат.Вставить("Представление", "ЗапросыИзБД");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
КонецФункции

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
КонецПроцедуры
// } Plugin interface

Процедура СохранитьНастройки() Экспорт
	ХранилищеОбщихНастроек.Сохранить("ЗагрузчикДанных", "ЗагружаемыеДанные", ЗагружаемыеДанные);
КонецПроцедуры

Процедура ВосстановитьНастройки() Экспорт
	ЗагружаемыеДанные = ХранилищеОбщихНастроек.Загрузить("ЗагрузчикДанных", "ЗагружаемыеДанные");	
КонецПроцедуры

Процедура ОчиститьБазу() Экспорт
	УстановитьМонопольныйРежим(Истина);
	УдалитьДанныеИнформационнойБазы();
КонецПроцедуры


Процедура ДобавитьТаблицуВТабличныйДокумент(ТабличныйДокумент) Экспорт
	
	Если Ложь Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ПолучитьМакет("ЗаготовкаМакета"));
	
КонецПроцедуры



Функция СоздатьДанныеПоТабличномуДокументу(Макет) Экспорт
	
	мОчищенныеКоллекции = Новый Соответствие;
	мКэшНаборИзмеренийРегистровСведений = Новый Соответствие;
	
	мРезультат = Новый Структура;
	СтэкГруппировок = Новый Массив;
	СтэкГруппировок.Добавить(мРезультат);
	
	Для счСтр = 1 по Макет.ВысотаТаблицы Цикл
		// Читаем первую колонку макета - шапка данных
		ИмяПараметра = Макет.Область(счСтр, 1).Текст;
		ЗначениеПараметра = Макет.Область(счСтр, 2).Текст;
		Если ПустаяСтрока(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипПеременной = Неопределено;
		ИмяПеременной = Неопределено;
		
		ИмяПараметра = ВРЕГ(СокрЛП(ИмяПараметра));
		ЗначениеПараметра = СокрЛП(ЗначениеПараметра);
		
		Пока ЗначениеЗаполнено(ИмяПараметра) Цикл
			
			Если ИмяПараметра = "ГРУППА" Тогда
				Родитель = СтэкГруппировок[СтэкГруппировок.ВГраница()];
				Наследник = Новый Структура;
				
				Родитель.Вставить(ЗначениеПараметра, Наследник);
				СтэкГруппировок.Добавить(Наследник);
				
				Прервать;
			ИначеЕсли ИмяПараметра = "КОНЕЦ" Тогда
				СтэкГруппировок.Удалить(СтэкГруппировок.ВГраница());
				Прервать;
			КонецЕсли;
			
			Если ИмяПараметра = "ТИП" Тогда
				ТипПеременной = ЗначениеПараметра;
			ИначеЕсли ИмяПараметра = "ИМЯ" Тогда
				ИмяПеременной = ЗначениеПараметра;
			КонецЕсли;
			
			счСтр = счСтр + 1;
			ИмяПараметра = врег(Макет.Область(счСтр, 1).Текст);
			ЗначениеПараметра = Макет.Область(счСтр, 2).Текст;
		КонецЦикла;
		
		Если ТипПеременной = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
		Состояние(Формат(счСтр/Макет.ВысотаТаблицы*100,"ЧДЦ=") + "%. " + ТипПеременной + " - " + ИмяПеременной);
		#КонецЕсли
		
		Попытка
			ТаблицаИзМакета = ПрочитатьТаблицуЗначенийИзМакета(счСтр, Макет);
		Исключение
			СистемноеОписаниеОшибки = ОписаниеОшибки();
			ПользовательскоеОписаниеОшибки = "ТИП: "+ТипПеременной+".Ошибка при создании данных из макета в строках, начиная с "+счСтр;
			Сообщить(ПользовательскоеОписаниеОшибки + " : " + СистемноеОписаниеОшибки, СтатусСообщения.ОченьВажное);
			ТаблицаИзМакета = Новый ТаблицаЗначений;
		КонецПопытки;
		
		НачСтрокаТаблицыВМакете = счСтр;
		КонСтрокаТаблицыВМакете = НачСтрокаТаблицыВМакете + ТаблицаИзМакета.Количество() + 2;
		
		СчСтр = КонСтрокаТаблицыВМакете;
		
		Попытка
			Результат = ЗаписатьВБазуДанныеИзТаблицыЗначений(ТаблицаИзМакета, ТипПеременной);
		Исключение
			СистемноеОписаниеОшибки = ОписаниеОшибки();
			ПользовательскоеОписаниеОшибки = "ТИП: "+ТипПеременной+".Ошибка при создании данных из макета в строках с "+НачСтрокаТаблицыВМакете + " по " + КонСтрокаТаблицыВМакете;
			Сообщить(ПользовательскоеОписаниеОшибки + " : " + СистемноеОписаниеОшибки, СтатусСообщения.ОченьВажное);
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ИмяПеременной) Тогда
			СтэкГруппировок[СтэкГруппировок.ВГраница()].Вставить(ИмяПеременной, Результат);
		КонецЕсли;
		
		
	КонецЦикла;
	
	мОчищенныеКоллекции = Новый Соответствие;
	
	Возврат мРезультат;
КонецФункции

Функция ПрочитатьТаблицуЗначенийИзМакета(НачСтрокаМакета, Макет)
	// Читаем третью колонку макета - таблица данных
	// НачСтрокаМакета - содержит имена колонок таблицы, 
	// НачСтрока+1 - содержит описание типов (может быть незаполнено, тогда колонка может быть любого типа)
	ПоследняяКолонка = ПолучитьНомерПоследнейКолонкиШапкиТаблицы(Макет, НачСтрокаМакета);
	Для КонСтрокаМакета = НачСтрокаМакета + 1 По Макет.ВысотаТаблицы Цикл
		Для счКол = 3 По ПоследняяКолонка Цикл
			Если ПустаяСтрока(Макет.Область(КонСтрокаМакета+1, счКол).Текст) Тогда
				ЭтоКонецТаблицы = Истина;
				Продолжить;
			КонецЕсли;
			ЭтоКонецТаблицы = Ложь;
			Прервать;
		КонецЦикла;
		
		Если ЭтоКонецТаблицы Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть(НачСтрокаМакета,,КонСтрокаМакета);
	
	Возврат ПрочитатьТаблицуЗначенийИзОбластиМакета(Область);
	
КонецФункции
Функция ПолучитьНомерПоследнейКолонкиШапкиТаблицы(Макет, НомерСтрокиШапки)
	
	счКол = 3;
	Пока ЗначениеЗаполнено(Макет.Область(НомерСтрокиШапки, счКол+1).Текст) Цикл
		счКол=счКол+1;
	КонецЦикла;
	Возврат счКол;
	
КонецФункции
Функция ПрочитатьТаблицуЗначенийИзОбластиМакета(Область)
	
	ТаблицаИзМакета = Новый ТаблицаЗначений;
	Для счКол = 3 по Область.ШиринаТаблицы Цикл
		ИмяКолонки = Область.Область(1, счКол).Текст;
		Если ПустаяСтрока(ИмяКолонки) Тогда
			Прервать;
		КонецЕсли;
		
		ТипКолонки = Область.Область(2, счКол).Текст;
		Если ПустаяСтрока(ТипКолонки) Тогда
			ТаблицаИзМакета.Колонки.Добавить(ИмяКолонки);
		Иначе
			Попытка
				ТаблицаИзМакета.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ТипКолонки));
			Исключение
				ТаблицаИзМакета.Колонки.Добавить(ИмяКолонки);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Для счСтр = 3 по Область.ВысотаТаблицы Цикл
		
		НоваяСтрока = ТаблицаИзМакета.Добавить();
		Для счКол = 1 по ТаблицаИзМакета.Колонки.Количество() Цикл
			Колонка = ТаблицаИзМакета.Колонки[счКол-1];
			Значение = Область.Область(счСтр, счКол+2).Текст;
			ТипыКолонки = Колонка.ТипЗначения.Типы();
			
			
			Тип = Неопределено;
			Если Найти(Значение, "=") = 1 Тогда
				Значение = Вычислить(Сред(Значение, 2));
			ИначеЕсли ТипыКолонки.Количество() Тогда
				Тип = ТипыКолонки[0];
			ИначеЕсли Найти(Значение, "[Т]ДокументСсылка.") Тогда
				Значение = ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "Н");
				Тип = Тип(Значение.Т);
			ИначеЕсли Найти(Значение, "[Т]СправочникСсылка.") И ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "К").Свойство("Т") Тогда
				Значение = ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "К");
				Тип = Тип(Значение.Т);
			ИначеЕсли Найти(Значение, "[Т]ПеречислениеСсылка.") Тогда
				Значение = ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "И");
				Тип = Тип(Значение.Т);
				Значение = Значение.И;
			ИначеЕсли Найти(Значение, "[Т]ПланВидовХарактеристикСсылка.") И ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "К").Свойство("Т") Тогда
				Значение = ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "К");
				Тип = Тип(Значение.Т);
			ИначеЕсли Найти(Значение, "[Т]ПланСчетовСсылка.") И ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "К").Свойство("Т") Тогда
				Значение = ДополнитьСтрокуИПрочитатьСтруктуру(Значение, "К");
				Тип = Тип(Значение.Т);
			КонецЕсли;
			
			Если НЕ Тип = Неопределено Тогда
				Значение = НайтиСоздатьЗначениеПоСтрокеИлиСтруктуре(Значение, Тип);
			КонецЕсли;
			
			НоваяСтрока[Колонка.Имя] = Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция НайтиСоздатьЗначениеПоСтрокеИлиСтруктуре(СтрокаИлиСтруктура, Тип) Экспорт
	ТипМетаданных = Метаданные.НайтиПоТипу(Тип);

	Если НЕ ТипМетаданных = Неопределено Тогда
		
		Если Метаданные.Перечисления.Содержит(ТипМетаданных) Тогда
			Значение = НайтиПеречисление(СтрокаИлиСтруктура, ТипМетаданных);
			
		ИначеЕсли Метаданные.Справочники.Содержит(ТипМетаданных) Тогда
			Значение = НайтиСоздатьОбъектСКодом(СтрокаИлиСтруктура, ТипМетаданных);
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ТипМетаданных) Тогда
			Значение = НайтиСоздатьОбъектСКодом(СтрокаИлиСтруктура, ТипМетаданных);
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(ТипМетаданных) Тогда
			Значение = НайтиСоздатьОбъектСКодом(СтрокаИлиСтруктура, ТипМетаданных);
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ТипМетаданных) Тогда
			Значение = НайтиСоздатьОбъектСКодом(СтрокаИлиСтруктура, ТипМетаданных);
			
		ИначеЕсли Метаданные.Документы.Содержит(ТипМетаданных) Тогда
			Значение = НайтиСоздатьОбъектСНомером(СтрокаИлиСтруктура, ТипМетаданных);
		ИначеЕсли Метаданные.Задачи.Содержит(ТипМетаданных) Тогда
			Значение = НайтиСоздатьОбъектСНомером(СтрокаИлиСтруктура, ТипМетаданных);
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ТипМетаданных) Тогда
			Значение = НайтиСоздатьОбъектСНомером(СтрокаИлиСтруктура, ТипМетаданных);
		КонецЕсли;
		
	Иначе
		
		Если Тип = Тип("ВидДвиженияНакопления") Тогда
			Значение = ВидДвиженияНакопления[СтрокаИлиСтруктура];
		ИначеЕсли Тип = Тип("СтандартныйПериод") Тогда
			Строка = СтрЗаменить(СтрокаИлиСтруктура, "-", Символы.ПС);
			ДатаСтрокой = СтрПолучитьСтроку(Строка, 1);
			Если ПустаяСтрока(ДатаСтрокой) Тогда
				НачалоПериода = Дата(1,1,1);
			Иначе
				НачалоПериода = Дата(ДатаСтрокой);
			КонецЕсли;
			
			ДатаСтрокой = СтрПолучитьСтроку(Строка, 2);
			Если ПустаяСтрока(ДатаСтрокой) Тогда
				КонецПериода = Дата(1,1,1);
			Иначе
				КонецПериода = Дата(ДатаСтрокой);
			КонецЕсли;
			Значение = Новый СтандартныйПериод(НачалоПериода, КонецПериода);
		Иначе
			Значение = СтрокаИлиСтруктура;
		КонецЕсли;
		
	КонецЕсли;

	
	Возврат Значение;
КонецФункции


Функция НайтиПеречисление(Идентификатор, ТипМетаданных)
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат Перечисления[ТипМетаданных.Имя].ПустаяСсылка();
	КонецЕсли;
	Возврат  Перечисления[ТипМетаданных.Имя][Идентификатор];
КонецФункции
Функция НайтиСоздатьОбъектСКодом(Код, ТипМетаданных)
	Если Метаданные.Справочники.Содержит(ТипМетаданных) Тогда
		Менеджер = Справочники[ТипМетаданных.Имя];
		МетодПоискаПоНаименованию = "НайтиПоНаименованию(СтруктураПоиска.К,Истина,Родитель,Владелец)";
		МетодПоискаПоКоду = "НайтиПоКоду(СтруктураПоиска.К,Ложь,Родитель,Владелец)";
		МетодСозданияЭлемента = "СоздатьЭлемент()";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ТипМетаданных) Тогда
		Менеджер = ПланыВидовХарактеристик[ТипМетаданных.Имя];
		МетодПоискаПоНаименованию = "НайтиПоНаименованию(СтруктураПоиска.К,Истина,Родитель)";
		МетодПоискаПоКоду = "НайтиПоКоду(СтруктураПоиска.К,Родитель)";
		МетодСозданияЭлемента = "СоздатьЭлемент()";
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ТипМетаданных) Тогда
		Менеджер = ПланыСчетов[ТипМетаданных.Имя];
		МетодПоискаПоНаименованию = "НайтиПоНаименованию(СтруктураПоиска.К,Истина,Родитель)";
		МетодПоискаПоКоду = "НайтиПоКоду(СтруктураПоиска.К,Родитель)";
		МетодСозданияЭлемента = "СоздатьСчет()";
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ТипМетаданных) Тогда
		Менеджер = ПланыВидовРасчета[ТипМетаданных.Имя];
		МетодПоискаПоНаименованию = "НайтиПоНаименованию(СтруктураПоиска.К,Истина)";
		МетодПоискаПоКоду = "НайтиПоКоду(СтруктураПоиска.К)";
		МетодСозданияЭлемента = "СоздатьВидРасчета()";
	КонецЕсли;
	
	Если ПустаяСтрока(Код) Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(Код) = Тип("Строка") Тогда
		СтруктураПоиска = ДополнитьСтрокуИПрочитатьСтруктуру(Код, "К"); 
	Иначе
		СтруктураПоиска = Код;
	КонецЕсли;
	
	ЭтоОбъектБезКода = (ТипМетаданных.ДлинаКода = 0);
	Если СтруктураПоиска.Свойство("У") Тогда
		УИД = Новый УникальныйИдентификатор(СтруктураПоиска.У);
		Ссылка = Менеджер.ПолучитьСсылку(УИД);
		Если Ссылка.ПолучитьОбъект() = Неопределено Тогда
			СсылкаНового = Ссылка;
			Ссылка = Менеджер.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ЭтоОбъектБезКода Тогда
		Ссылка = Вычислить("Менеджер."+МетодПоискаПоНаименованию);
	Иначе
		Ссылка = Вычислить("Менеджер."+МетодПоискаПоКоду);
	КонецЕсли;
	
	Если НЕ Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("Г") Тогда
		Объект = Менеджер.СоздатьГруппу();
	Иначе
		Объект = Вычислить("Менеджер."+МетодСозданияЭлемента);
	КонецЕсли;
	
	Если НЕ СсылкаНового = Неопределено Тогда
		Объект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	Буфер = Новый Структура("Код,Наименование",СтруктураПоиска.К,СтруктураПоиска.К);
	
	
	Если СтруктураПоиска.Свойство("Р") Тогда
		Родитель = НайтиСоздатьОбъектСКодом(СтруктураПоиска.Р, ТипМетаданных);
	КонецЕсли;
	Если СтруктураПоиска.Свойство("В") И СтруктураПоиска.В.Свойство("Т") Тогда
		ТипМетаданныхВладельца = Метаданные.НайтиПоТипу(Тип(СтруктураПоиска.В.Т));
		Владелец = НайтиСоздатьОбъектСКодом(СтруктураПоиска.В, ТипМетаданныхВладельца);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Буфер);
	Если ЗначениеЗаполнено(Родитель) Тогда
		Объект.Родитель = Родитель;
	КонецЕсли;
	Если ЗначениеЗаполнено(Владелец) Тогда
		Объект.Владелец = Владелец;
	КонецЕсли;
	
	Буфер = Новый Структура("ОбменДанными");
	ЗаполнитьЗначенияСвойств(Буфер, Объект);
	Если НЕ Буфер.ОбменДанными = Неопределено Тогда
		Объект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	Объект.Записать();
	
	Возврат Объект.Ссылка;
	
КонецФункции
Функция НайтиСоздатьОбъектСНомером(Номер, ТипМетаданных)
	
	Если Метаданные.Документы.Содержит(ТипМетаданных) Тогда
		Менеджер = Документы[ТипМетаданных.Имя];
		МетодСоздания = "СоздатьДокумент";
	ИначеЕсли Метаданные.Задачи.Содержит(ТипМетаданных) Тогда
		Менеджер = Задачи[ТипМетаданных.Имя];
		МетодСоздания = "СоздатьЗадачу";
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ТипМетаданных) Тогда
		Менеджер = БизнесПроцессы[ТипМетаданных.Имя];
		МетодСоздания = "СоздатьБизнесПроцесс";
	КонецЕсли;
	
	Если ПустаяСтрока(Номер) Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(Номер) = Тип("Строка") Тогда
		СтруктураПоиска = ДополнитьСтрокуИПрочитатьСтруктуру(Номер, "Н"); // получили номер в формате {[Н]001[Д]20100921}
	Иначе
		СтруктураПоиска = Номер;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураПоиска.Н) И НЕ СтруктураПоиска.Свойство("У") Тогда
		Возврат Менеджер.ПустаяСсылка();
	КонецЕсли;
	
	Если СтруктураПоиска.Свойство("У") Тогда
		УИД = Новый УникальныйИдентификатор(СтруктураПоиска.У);
		ОбъектСсылка = Менеджер.ПолучитьСсылку(УИД);
		Если ОбъектСсылка.ПолучитьОбъект() = Неопределено Тогда
			СсылкаНового = ОбъектСсылка;
			ОбъектСсылка = Менеджер.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли СтруктураПоиска.Свойство("Д") Тогда
		ОбъектСсылка = Менеджер.НайтиПоНомеру(СтруктураПоиска.Н, СтруктураПоиска.Д);
	Иначе
		ОбъектСсылка = НайтиПоНомеру(СтруктураПоиска.Н, ТипМетаданных.ПолноеИмя()); // для документов с периодичной нумерацией стандартный метод НайтиПоНомеру() не работает без указания даты, поэтому ищем запросом
		СтруктураПоиска.Вставить("Д", "20000101");
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Возврат ОбъектСсылка;
	КонецЕсли;
	
	Объект = Вычислить("Менеджер."+МетодСоздания + "()");
	Объект.Номер = СтруктураПоиска.Н;
	Объект.Дата = СтруктураПоиска.Д;
	Объект.ОбменДанными.Загрузка = Истина;
	
	Если НЕ СсылкаНового = Неопределено Тогда
		Объект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	Объект.Записать();
	Возврат Объект.Ссылка;
	
КонецФункции
Функция НайтиПоНомеру(Номер, ИмяТаблицы)
	Перем Запрос;
	Запрос = Новый Запрос;
	Запрос.Текст = "выбрать первые 1 т.Ссылка из ИмяТаблицы как т где т.Номер=&Номер";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("Номер", Номер);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ДополнитьСтрокуИПрочитатьСтруктуру(Строка, ПолеПоУмолчанию)
	СтрокаДляСтруктуры = Строка;
	Если НЕ Лев(СтрокаДляСтруктуры, 1) = "{" Тогда
		СтрокаДляСтруктуры = "{"+СтрокаДляСтруктуры+"}";
	КонецЕсли;
	ПолеПоУмолчаниюВСкобках = "[" + ПолеПоУмолчанию + "]";
	СтрокаДляСтруктуры = СтрЗаменить(СтрокаДляСтруктуры, "{", "{"+ПолеПоУмолчаниюВСкобках);
	СтрокаДляСтруктуры = СтрЗаменить(СтрокаДляСтруктуры, ПолеПоУмолчаниюВСкобках+ПолеПоУмолчаниюВСкобках, ПолеПоУмолчаниюВСкобках);
	Возврат ПрочитатьСтруктуруИзСтроки(СтрокаДляСтруктуры);
КонецФункции
Функция ПрочитатьСтруктуруИзСтроки(Строка, Позиция=1)
	СтруктураИзСтроки = Новый Структура;
	
	Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
	Пока Позиция <= СтрДлина(Строка) Цикл
		Если Символ = "}" Тогда
			Прервать;
		КонецЕсли;
		
		Ключ = ПрочитатьСловоИзСтроки(Строка, Позиция);
		
		Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
		Если Символ = "{" Тогда
			Значение = ПрочитатьСтруктуруИзСтроки(Строка, Позиция);
		Иначе
			Позиция=Позиция-1;
			Значение = ПрочитатьСловоИзСтроки(Строка, Позиция);
		КонецЕсли;
		
		СтруктураИзСтроки.Вставить(Ключ, Значение);
		
		Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
	КонецЦикла;
	
	Возврат СтруктураИзСтроки;
КонецФункции
Функция ПрочитатьСледующийСимволИзСтроки(Строка, Позиция)
	Позиция=Позиция+1;
	Возврат Сред(Строка, Позиция, 1);
КонецФункции
Функция ПрочитатьСловоИзСтроки(Строка, Позиция)
	Слово = "";
	Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
	Пока Позиция <= СтрДлина(Строка) Цикл
		Если Символ = "]" Тогда
			Прервать;
		ИначеЕсли Символ = "[" Тогда
			Позиция=Позиция-1;
			Прервать;
		ИначеЕсли Символ = "}" Тогда
			Позиция=Позиция-1;
			Прервать;
		КонецЕсли;
		Слово=Слово+Символ;
		Символ = ПрочитатьСледующийСимволИзСтроки(Строка, Позиция);
	КонецЦикла;
	
	Возврат Слово;
КонецФункции
Функция ПолучитьСтрокуДоРазделителя(Строка, Разделитель)
	Поз = Найти(Строка, Разделитель);
	Если Поз = 0 Тогда
		Возврат Строка;
	КонецЕсли;
	
	Возврат Лев(Строка, Поз - 1);
КонецФункции


Функция ЗаписатьВБазуДанныеИзТаблицыЗначений(ТаблицаЗначений, ТипПеременной) Экспорт
	// ТипПеременной м.б. например: РегистрНакопления.ОстаткиТоваров или Документ.РасходнаяНакладная.ТабличнаяЧасть.Товары
	
	Префикс = ПолучитьСтрокуДоРазделителя(ТипПеременной, ".");
	ВидМетаданных = СтрЗаменить(ТипПеременной, Префикс+".", "");
	
	Возврат Вычислить("ЗаполнитьИзТаблицыЗначений_" + Префикс + "(ТаблицаЗначений,ВидМетаданных)");
	
КонецФункции

Функция ЗаполнитьИзТаблицыЗначений_ТаблицаЗначений(ТаблицаИзМакета, Вид)
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Структура(ТаблицаИзМакета, Вид)
	СтруктураИзМакета = Новый Структура;
	Для каждого Колонка из ТаблицаИзМакета.Колонки Цикл
		СтруктураИзМакета.Вставить(Колонка.Имя);
	КонецЦикла;
	Если ТаблицаИзМакета.Количество() = 0 Тогда
		ТаблицаИзМакета.Добавить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураИзМакета, ТаблицаИзМакета[0]);
	Возврат СтруктураИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Массив(ТаблицаИзМакета, Вид)
	Возврат ТаблицаИзМакета.ВыгрузитьКолонку(0);
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Документ(ТаблицаИзМакета, Вид)
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Справочник(ТаблицаИзМакета, Вид)
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_ПланВидовХарактеристик(ТаблицаИзМакета, Вид)
	
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	Возврат ТаблицаИзМакета;
	
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_ПланСчетов(ТаблицаИзМакета, Вид)
	
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	Возврат ТаблицаИзМакета;
	
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_ПланВидовРасчета(ТаблицаИзМакета, Вид)
	
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	Возврат ТаблицаИзМакета;
	
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Задача(ТаблицаИзМакета, Вид)
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_БизнесПроцесс(ТаблицаИзМакета, Вид)
	Возврат ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, Вид);
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_РегистрСведений(ТаблицаИзМакета, ИмяРегистра)
	Если НЕ ТаблицаИзМакета.Колонки.Найти("Регистратор") = Неопределено Тогда
		Возврат ЗаполнитьИзТаблицыЗначений_ДвиженияДокумента(ТаблицаИзМакета, ИмяРегистра);
	КонецЕсли;
	
	ИзмеренияСтрокой = мКэшНаборИзмеренийРегистровСведений.Получить(ИмяРегистра);
	Если ИзмеренияСтрокой = Неопределено Тогда
		ИзмеренияСтрокой = "";
		Для Каждого Реквизит Из Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
			ИзмеренияСтрокой = ИзмеренияСтрокой + Реквизит.Имя + ",";
		КонецЦикла;
		Если Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений 
			<> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ИзмеренияСтрокой = ИзмеренияСтрокой + "Период";
		КонецЕсли;
		мКэшНаборИзмеренийРегистровСведений.Вставить(ИмяРегистра, ИзмеренияСтрокой);
	КонецЕсли;
	
	Для каждого Строка из ТаблицаИзМакета Цикл
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		СтруктураОтборов = Новый Структура(ИзмеренияСтрокой);
		ЗаполнитьЗначенияСвойств(СтруктураОтборов, Строка);
		Для Каждого КлючИЗначение Из СтруктураОтборов Цикл
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		
		//Менеджер = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		//ЗаполнитьЗначенияСвойств(Менеджер, Строка);
		//Менеджер.Прочитать();
		//ЗаполнитьЗначенияСвойств(Менеджер, Строка);
		//
		//Попытка
		//	Менеджер.Записать(Истина);
		//Исключение
		//	Сообщить("Ошибка при попытке записи в регистр сведений ["+ИмяРегистра+"]: " + ОписаниеОшибки());
		//КонецПопытки;
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_РегистрНакопления(ТаблицаИзМакета, ИмяРегистра)
	ЗаполнитьИзТаблицыЗначений_ДвиженияДокумента(ТаблицаИзМакета, ИмяРегистра);
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Константа(ТаблицаИзМакета, ДопПараметр)
	
	Для каждого Колонка из ТаблицаИзМакета.Колонки Цикл
		ИмяКонстанты = Колонка.Имя;
		
		Попытка
			Константы[ИмяКонстанты].Установить(ТаблицаИзМакета[0][ИмяКонстанты]);
		Исключение
			Сообщить("Ошибка при попытке записи константы ["+ИмяКонстанты+"]: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции


Функция ЗаполнитьИзТаблицыЗначений_ДвиженияДокумента(ТаблицаИзМакета, ИмяРегистра)
	
	СчетчикИндикатора = 1;
	
	Регистраторы = ТаблицаИзМакета.Скопировать(, "Регистратор");
	Регистраторы.Свернуть("Регистратор");
	Для Каждого СтрокаРегистратор Из Регистраторы Цикл
		Отбор = Новый Структура("Регистратор", СтрокаРегистратор.Регистратор);
		НайденныеСтроки = ТаблицаИзМакета.НайтиСтроки(Отбор);
		
		Движения = СтрокаРегистратор
					.Регистратор
					.ПолучитьОбъект()
					.Движения[ИмяРегистра];
		Движения.Прочитать();
		
		ОчиститьКоллекциюПриПервомУпоминании(Движения, СтрокаРегистратор.Регистратор, "Дввижения."+ИмяРегистра);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СчетчикИндикатора%200 = 0 Тогда
				ТекстСостояние = "Запись движений: " + ИмяРегистра + ". " + СчетчикИндикатора + "/" + ТаблицаИзМакета.Количество();
				#Если Клиент Тогда
				Состояние(ТекстСостояние);
				#КонецЕсли
			КонецЕсли;
			СчетчикИндикатора = СчетчикИндикатора + 1;
			
			НовоеДвижение = Движения.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Строка);
			Если НовоеДвижение.Период = Дата(1,1,1) Тогда
				НовоеДвижение.Период = НовоеДвижение.Регистратор.Дата;
			КонецЕсли;
		КонецЦикла;
		
		Движения.ОбменДанными.Загрузка = Истина;
		
		Попытка
			Движения.Записать(Истина);
		Исключение
			Сообщить("Ошибка при попытке записи движений ["+ИмяРегистра+"] для регистратора ["+Строка.Регистратор+"]: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ЗаполнитьИзТаблицыЗначений_Объект(ТаблицаИзМакета, ВидОбъекта)
	ИмяТабличнойЧасти = "";
	Если Найти(нрег(ВидОбъекта), ".табличнаячасть.") Тогда
		Буфер = СтрЗаменить(нрег(ВидОбъекта), ".табличнаячасть.", Символы.ПС);
		ИмяТабличнойЧасти = СтрПолучитьСтроку(Буфер, 2);
	КонецЕсли;
	
	Для каждого Строка из ТаблицаИзМакета Цикл
		Объект = Строка.Ссылка.ПолучитьОбъект();
		
		Буфер = Новый Структура("ЭтоГруппа");
		ЗаполнитьЗначенияСвойств(Буфер, Строка);
		
		Если НЕ ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			ОчиститьКоллекциюПриПервомУпоминании(Объект[ИмяТабличнойЧасти], Объект.Ссылка, "ТабличнаяЧасть."+ИмяТабличнойЧасти);
			ЗаполнитьЗначенияСвойств(Объект[ИмяТабличнойЧасти].Добавить(), Строка);
		ИначеЕсли НЕ Буфер.ЭтоГруппа = Неопределено Тогда
			СтруктураСвойствДоступныхДляЗаписи = ПолучитьСтруктурСвойствДоступныхДляЗаписи(Объект);
			ЗаполнитьЗначенияСвойств(СтруктураСвойствДоступныхДляЗаписи, Строка);
			ЗаполнитьЗначенияСвойств(Объект, СтруктураСвойствДоступныхДляЗаписи);
		Иначе
			ЗаполнитьЗначенияСвойств(Объект, Строка);
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("Ошибка при попытке записи  ["+ВидОбъекта+"]: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Возврат ТаблицаИзМакета;
КонецФункции
Функция ПолучитьСтруктурСвойствДоступныхДляЗаписи(Объект)
	СтруктураДоступныхСвойств = Новый Структура("Код,Наименование");
	
	Буфер = Новый Структура("ЭтоГруппа");
	ЗаполнитьЗначенияСвойств(Буфер, Объект);
	Если Буфер.ЭтоГруппа = Истина Тогда
		НедоступноеИспользование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента;
	Иначе
		НедоступноеИспользование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы;
	КонецЕсли;
	
	Для Каждого Реквизит Из Объект.Метаданные().СтандартныеРеквизиты Цикл
		СтруктураДоступныхСвойств.Вставить(Реквизит.Имя);
	КонецЦикла;
	Для Каждого Реквизит Из Объект.Метаданные().Реквизиты Цикл
		Если Реквизит.Использование = НедоступноеИспользование Тогда
			Продолжить;
		КонецЕсли;
		СтруктураДоступныхСвойств.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат СтруктураДоступныхСвойств;
КонецФункции

Процедура ОчиститьКоллекциюПриПервомУпоминании(Коллекция, Ссылка, Ключ)
	
	Если мОчищенныеКоллекции[Ссылка] = Неопределено Тогда
		мОчищенныеКоллекции.Вставить(Ссылка, Новый Соответствие);
	ИначеЕсли мОчищенныеКоллекции[Ссылка][Ключ] = Неопределено Тогда
	Иначе
		Возврат;
	КонецЕсли;
	мОчищенныеКоллекции[Ссылка].Вставить(Ключ, Null);
	Коллекция.Очистить();
	
КонецПроцедуры

мОчищенныеКоллекции = Новый Соответствие;
